import React, { Component } from 'react'
import {
  View,
  Text,
  TouchableWithoutFeedback
} from 'react-native'
import axios from 'axios'
import { Header, Shapes } from '../../components'
import { getShapeSize } from '../../utils'
import { SQUARE, CIRCLE, TRIANGLE, SHAPE_LIST, COLORS_API, PATTERNS_API } from '../../constants'
import styles from './styles'

export default class AllShapes extends Component {
  state = {
    itemSpawned: 0,
    shapes: []
  }

  resetShapes = () => this.setState({ shapes: [] })

  onPressToSpawn = async (e) => {
    const { shapes } = this.state
    const shapeType = SHAPE_LIST[Math.floor(Math.random() * SHAPE_LIST.length)]
    const randomColor = Math.floor(Math.random()*16777215).toString(16)
    const size = getShapeSize()
    const defaults = {
      type: shapeType,
      size,
      positionX: e.nativeEvent ? e.nativeEvent.locationX - size / 2 : 0,
      positionY: e.nativeEvent ? e.nativeEvent.locationY - size / 2 : 0
    }

    if (!e.nativeEvent) {
      return
    }

    e.persist();
    switch (shapeType) {
      // 7. Fill squares with an image that is generated by calling the API from http://www.colourlovers.com/api/patterns/random?format=json using the imageUrl value
      case SQUARE: {
        const { data } = await axios.get(PATTERNS_API)
        const { imageUrl } = data[0] || {}

        shapes.push({
          ...defaults,
          color: `#${randomColor}`,
          image: imageUrl,
        })

        break;
      }
      // 6. Fill circles with a colour that is generated by calling the API from http://www.colourlovers.com/api/colors/random?format=json using either the RGB or Hex value

      case CIRCLE: {
        const { data } = await axios.get(COLORS_API)
        const { hex } = data[0] || { hex: randomColor } // set random color in case no api response

        shapes.push({
          ...defaults,
          color: `#${hex}`,
        })
        break;
      }

      // 8. Fill triangles randomly either using the fill circle or fill square requirements above.
      case TRIANGLE: {
        const API = [COLORS_API, PATTERNS_API]
        const { data } = await axios.get(API[Math.floor(Math.random() * Math.floor(1))])
        const { hex, imageUrl } = data[0] || { hex: randomColor }

        shapes.push({
          ...defaults,
          color: `#${hex}`,
          image: imageUrl,
        })
        break;
      }

      default:
        break;
    }

    this.setState({ shapes, itemSpawned: shapes.length })
  }

  renderShapes = () => {
    const { shapes } = this.state

    return (
      <View style={styles.shapeWrapper}>
        {
          shapes.map((data, index) => (
            <Shapes key={`${shapes}-${index}`} {...data} />
          ))
        }
      </View>
    )
  }

  render() {
    const { itemSpawned } = this.state

    return (
      <View style={styles.container}>
        <Header
          title="All Shapes"
          rightComponent={{ icon: 'eraser', color: '#fff', type: 'material-community', onPress: this.resetShapes }}
        />
        <TouchableWithoutFeedback style={styles.innerContainer} onPress={(evt) => this.onPressToSpawn(evt) }>
          {
            itemSpawned > 0 ? (
              <View style={styles.innerContainer}>
                {this.renderShapes()}
              </View>
            ) : (
              <View style={styles.centerContainer}>
                <Text style={styles.spawnText}>{"Let's spawn some shapes"}</Text>
                <Text>{"(Click anywhere on the screen)"}</Text>
              </View>
            )
          }
        </TouchableWithoutFeedback>
      </View>
    )
  }
}
